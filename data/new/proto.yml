# Created from MiNET docs
string: ["pstring",{"countType":"varint"}]
ByteArray: ["buffer",{"countType":"varint"}]
LittleString: ["pstring",{"countType":"li32"}]
varint32: varint
varint64: varint
bool: native
zigzag32: native
zigzag64: native
uuid: native
byterot: native
MapInfo: native
nbt: native

!import: packet_map.yml

!StartDocs: Packets

# # Login Sequence
# The login process is as follows:
#
# C→S: [Login](#packet_login)
# S→C: [Server To Client Handshake](#packet_server_to_client_handshake)
# C→S: [Client To Server Handshake](#packet_client_to_server_handshake)
# S→C: [Play Status (Login success)](#packet_play_status)
# To spawn, the following packets should be sent, in order, after the ones above:
#
# S→C: [Resource Packs Info](#packet_resource_packs_info)
# C→S: [Resource Pack Client Response](#packet_resource_pack_client_response)
# S→C: [Resource Pack Stack](#packet_resource_pack_stack)
# C→S: [Resource Pack Client Response](#packet_resource_pack_client_response)
# S→C: [Start Game](#packet_start_game)
# S→C: [Creative Content](#packet_creative_content)
# S→C: [Biome Definition List](#packet_biome_definition_list)
# S→C: [Chunks](#packet_level_chunk)
# S→C: [Play Status (Player spawn)](#packet_play_status)
# If there are no resource packs being sent, a Resource Pack Stack can be sent directly
#  after Resource Packs Info to avoid the client responses.


packet_login:
   !id: 0x01
   !bound: server
   protocol_version: i32
   # The combined size of the `chain` and `client_data`
   payload_size: varint
   # JSON array of JWT data: contains the display name, UUID and XUID
   # It should be signed by the Mojang public key
   chain: LittleString
   # Skin related data
   client_data: LittleString

packet_play_status:
   !id: 0x02
   !bound: client
   status: i32 =>
      # Sent after Login has been successfully decoded and the player has logged in
      0: login_success
      # Displays "Could not connect: Outdated client!"
      1: failed_client
      # Displays "Could not connect: Outdated server!"
      2: failed_spawn
      # Sent after world data to spawn the player
      3: player_spawn
      # Displays "Unable to connect to world. Your school does not have access to this server."
      4: failed_invalid_tenant
      # Displays "The server is not running Minecraft: Education Edition. Failed to connect."
      5: failed_vanilla_edu
      # Displays "The server is running an incompatible edition of Minecraft. Failed to connect."
      6: failed_edu_vanilla
      # Displays "Wow this server is popular! Check back later to see if space opens up. Server Full"
      7: failed_server_full


packet_server_to_client_handshake:
   !id: 0x03
   !bound: client
   # Contains the salt to complete the Diffie-Hellman key exchange
   token: string


# Sent by the client in response to a Server To Client Handshake packet 
# sent by the server. It is the first encrypted packet in the login handshake
# and serves as a confirmation that encryption is correctly initialized client side. 
# It has no fields.
packet_client_to_server_handshake:
   !id: 0x04
   !bound: server

# Sent by the server to disconnect a client.
packet_disconnect:
   !id: 0x05
   !bound: client
   # Specifies if the disconnection screen should be hidden when the client is disconnected, 
   # meaning it will be sent directly to the main menu.
   hide_disconnect_reason: bool
   # An optional message to show when disconnected.
   message: string


packet_resource_packs_info:
   !id: 0x06
   !bound: client
   # If the resource pack requires the client accept it.
   must_accept: bool
   # If scripting is enabled.
   has_scripts: bool
   # A list of behaviour packs that the client needs to download before joining the server. 
   # All of these behaviour packs will be applied together.
   behaviour_packs: BehaviourPackInfos
   # A list of resource packs that the client needs to download before joining the server. 
   # The order of these resource packs is not relevant in this packet. It is however important in the Resource Pack Stack packet.
   texture_packs: TexturePackInfos

packet_resource_pack_stack:
   !id: 0x07
   !bound: client
   # If the resource pack must be accepted for the player to join the server.
   must_accept: bool
   # [inline]
   behavior_packs: ResourcePackIdVersions
   # [inline]
   resource_packs: ResourcePackIdVersions
   game_version: string
   experiments: Experiments # ??? such random fields
   experiments_previously_used: bool

packet_resource_pack_client_response:
   !id: 0x08
   !bound: server
   response_status: u8 =>
      0: none
      1: refused
      2: send_packs
      3: have_all_packs
      4: completed
   # All of the pack IDs.
   resourcepackids: ResourcePackIds

# Sent by the client to the server to send chat messages, and by the server to the client 
# to forward or send messages, which may be chat, popups, tips etc.
## https://github.com/pmmp/PocketMine-MP/blob/a43b46a93cb127f037c879b5d8c29cda251dd60c/src/pocketmine/network/mcpe/protocol/TextPacket.php
## https://github.com/Sandertv/gophertunnel/blob/05ac3f843dd60d48b9ca0ab275cda8d9e85d8c43/minecraft/protocol/packet/text.go
packet_text:
   !id: 0x09
   !bound: both
   # TextType is the type of the text sent. When a client sends this to the server, it should always be
   # TextTypeChat. If the server sends it, it may be one of the other text types above.
   type: u8 =>
      0: raw
      1: chat
      2: translation
      3: popup
      4: jukebox_popup
      5: tip
      6: system
      7: whisper
      8: announcement
      9: json_whisper
      10: json
   # NeedsTranslation specifies if any of the messages need to be translated. It seems that where % is found
   # in translatable text types, these are translated regardless of this bool. Translatable text types
   # include TextTypeTip, TextTypePopup and TextTypeJukeboxPopup.
   needs_translation: bool
   _: type?
      if chat or whisper or announcement:
         source_name: string
      if raw or tip or system or json_whisper or json:
         message: string
      if translation or popup or jukebox_popup:
         message: string
         paramaters: string[]varint
   # The XUID of the player who sent this message.
   xuid: string
   # PlatformChatID is an identifier only set for particular platforms when chatting (presumably only for
   # Nintendo Switch). It is otherwise an empty string, and is used to decide which players are able to
   # chat with each other.
   platform_chat_id: string
# For additional information and examples of all the chat types above, see here: https://imgur.com/a/KhcFscg


# Sent by the server to update the current time client-side. The client actually advances time
# client-side by itself, so this packet does not need to be sent each tick. It is merely a means
# of synchronizing time between server and client.
packet_set_time:
   !id: 0x0a
   !bound: client
   # Time is the current time. The time is not limited to 24000 (time of day), but continues 
   # progressing after that.
   time: zigzag32

# Sent by the server to send information about the world the player will be spawned in.
packet_start_game:
   !id: 0x0b
   !bound: client
   # The unique ID of the player. The unique ID is a value that remains consistent across
   # different sessions of the same world, but most unofficial servers simply fill the
   # runtime ID of the entity out for this field.
   entity_id: zigzag64
   # The runtime ID of the player. The runtime ID is unique for each world session, 
   # and entities are generally identified in packets using this runtime ID.
   runtime_entity_id: varint64
   player_gamemode: zigzag32
   # The spawn position of the player in the world. In servers this is often the same as the 
   # world's spawn position found below.
   spawn: vec3f
   # The pitch and yaw of the player
   rotation: vec2f
   # The seed used to generate the world. Unlike in Java edition, the seed is a 32bit Integer here.
   seed: zigzag32
   biome_type: li16
   biome_name: string
   # Dimension is the ID of the dimension that the player spawns in. It is a value from 0-2, 
   # with 0 being the overworld, 1 being the nether and 2 being the end.
   dimension: zigzag32
   # Generator is the generator used for the world. It is a value from 0-4, with 0 being old
   # limited worlds, 1 being infinite worlds, 2 being flat worlds, 3 being nether worlds and 
   # 4 being end worlds. A value of 0 will actually make the client stop rendering chunks you 
   # send beyond the world limit.
   generator: zigzag32
   # The game mode that a player gets when it first spawns in the world. It is shown in the
   # settings and is used if the Player Gamemode is set to 5.
   gamemode: zigzag32
   # Difficulty is the difficulty of the world. It is a value from 0-3, with 0 being peaceful,
   # 1 being easy, 2 being normal and 3 being hard.
   difficulty: zigzag32
   # The block on which the world spawn of the world. This coordinate has no effect on the place
   # that the client spawns, but it does have an effect on the direction that a compass poInts.
   spawn_position: BlockCoordinates
   # Defines if achievements are disabled in the world. The client crashes if this value is set 
   # to true while the player's or the world's game mode is creative, and it's recommended to simply
   # always set this to false as a server.
   has_achievements_disabled: bool
   # The time at which the day cycle was locked if the day cycle is disabled using the respective
   # game rule. The client will maIntain this time as Boolean as the day cycle is disabled.
   day_cycle_stop_time: zigzag32
   # Some Minecraft: Education Edition field that specifies what 'region' the world was from, 
   # with 0 being None, 1 being RestOfWorld, and 2 being China. The actual use of this field is unknown.
   edu_offer: zigzag32
   # Specifies if the world has education edition features enabled, such as the blocks or entities
   # specific to education edition.
   has_edu_features_enabled: bool
   edu_product_uuid_: string
   # The level specifying the Intensity of the rain falling. When set to 0, no rain falls at all.
   rain_level: lf32
   lightning_level: lf32
   # The level specifying the Intensity of the thunder. This may actually be set independently
   # from the rain level, meaning dark clouds can be produced without rain.
   has_confirmed_platform_locked_content: bool
   # Specifies if the world is a multi-player game. This should always be set to true for servers.
   is_multiplayer: bool
   # Specifies if LAN broadcast was Intended to be enabled for the world.
   broadcast_to_lan: bool
   # The mode used to broadcast the joined game across XBOX Live.
   xbox_live_broadcast_mode: varint
   # The mode used to broadcast the joined game across the platform.
   platform_broadcast_mode: varint
   # If commands are enabled for the player. It is recommended to always set this to true on the
   # server, as setting it to false means the player cannot, under any circumstance, use a command.
   enable_commands: bool
   # Specifies if the texture pack the world might hold is required, meaning the client was
   #  forced to download it before joining.
   is_texturepacks_required: bool
   # Defines game rules currently active with their respective values. The value of these game
   #  rules may be either 'bool', 'Int32' or 'Float32'. Some game rules are server side only,
   #  and don't necessarily need to be sent to the client.
   gamerules: GameRules
   experiments: Experiments
   experiments_previously_used: bool
   # Specifies if the world had the bonus map setting enabled when generating it.
   # It does not have any effect client-side.
   bonus_chest: bool
   # Specifies if the world has the start with map setting enabled, meaning each
   # joining player obtains a map. This should always be set to false, because the
   # client obtains a map all on its own accord if this is set to true.
   map_enabled: bool
   # The permission level of the player. It is a value from 0-3, with 0 being visitor,
   # 1 being member, 2 being operator and 3 being custom.
   permission_level: zigzag32
   # The radius around the player in which chunks are ticked. Most servers set this value
   # to a fixed number, as it does not necessarily affect anything client-side.
   server_chunk_tick_range: li32
   # Specifies if the texture pack of the world is locked, meaning it cannot be disabled
   # from the world. This is typically set for worlds on the marketplace that have a dedicated
   # texture pack.
   has_locked_behavior_pack: bool
   # Specifies if the texture pack of the world is locked, meaning it cannot be disabled from the
   # world. This is typically set for worlds on the marketplace that have a dedicated texture pack.
   has_locked_resource_pack: bool
   # Specifies if the world from the server was from a locked world template.
   # For servers this should always be set to false.
   is_from_locked_world_template: bool
   msa_gamertags_only: bool
   # Specifies if the world from the server was from a locked world template. 
   # For servers this should always be set to false.
   is_from_world_template: bool
   # Specifies if the world was a template that locks all settings that change properties 
   # above in the settings GUI. It is recommended to set this to true for servers that
   # do not allow things such as setting game rules through the GUI.
   is_world_template_option_locked: bool
   # A hack that Mojang put in place to preserve backwards compatibility with old villagers. 
   # The his never actually read though, so it has no functionality.
   only_spawn_v1_villagers: bool
   # The version of the game from which Vanilla features will be used.
   # The exact function of this field isn't clear.
   game_version: string
   limited_world_width: li32
   limited_world_length: li32
   is_new_nether_: bool
   experimental_gameplay_override: bool
   # A base64 encoded world ID that is used to identify the world.
   level_id: string
   # The name of the world that the player is joining. Note that this field shows up
   # above the player list for the rest of the game session, and cannot be changed.
   # Setting the server name to this field is recommended.
   world_name: string
   # A UUID specific to the premium world template that might have been used to
   # generate the world. Servers should always fill out an empty String for this.
   premium_world_template_id: string
   # Specifies if the world was a trial world, meaning features are limited and there 
   # is a time limit on the world.
   is_trial: bool
   # Specifies if the client or server is authoritative over the movement of the player, 
   # meaning it controls the movement of it. 
   ## https://github.com/pmmp/PocketMine-MP/blob/a43b46a93cb127f037c879b5d8c29cda251dd60c/src/pocketmine/network/mcpe/protocol/types/PlayerMovementType.php#L26
   movement_authority: zigzag32 =>
      0: client
      1: server
      # PlayerAuthInputPacket + a bunch of junk that solves a nonexisting problem
      2: server_v2_rewind
   # The total time in ticks that has elapsed since the start of the world.
   current_tick: li64
   # The seed used to seed the random used to produce enchantments in the enchantment table. 
   # Note that the exact correct random implementation must be used to produce the correct
   # results both client- and server-side.
   enchantment_seed: zigzag32

   ## This is not sent anymore in protocol versions > 419 (Bedrock Edition v1.16.100)
   ## A list of all blocks registered on the server.
   block_palette: BlockPalette
   # A list of all items with their legacy IDs which are available in the game.
   # Failing to send any of the items that are in the game will crash mobile clients.
   itemstates: Itemstates
   # A unique ID specifying the multi-player session of the player. 
   # A random UUID should be filled out for this field.
   multiplayer_correlation_id: string
   server_authoritative_inventory: bool


packet_add_player:
   !id: 0x0c
   !bound: client
   # UUID is the UUID of the player. It is the same UUID that the client sent in the
   # Login packet at the start of the session. A player with this UUID must exist
   # in the player list (built up using the Player List packet) for it to show up in-game.
   uuid: uuid
   # Username is the name of the player. This username is the username that will be
   # set as the initial name tag of the player.
   username: string
   # The unique ID of the player. The unique ID is a value that remains consistent
   #  across different sessions of the same world, but most unoffical servers simply 
   # fill the runtime ID of the player out for this field.
   entity_id_self: zigzag64
   # The runtime ID of the player. The runtime ID is unique for each world session,
   # and entities are generally identified in packets using this runtime ID.
   runtime_entity_id: varint
   # An identifier only set for particular platforms when chatting (presumably only for 
   # Nintendo Switch). It is otherwise an empty string, and is used to decide which players
   # are able to chat with each other.
   platform_chat_id: string
   x: lf32
   y: lf32
   z: lf32
   speed_x: lf32
   speed_y: lf32
   speed_z: lf32
   pitch: lf32
   yaw: lf32
   head_yaw: lf32
   held_item: Item
   metadata: MetadataDictionary
   flags: varint
   command_permission: varint
   action_permissions: varint
   permission_level: varint
   custom_stored_permissions: varint
   user_id: li64
   links: Links
   device_id: string
   device_os: li32

packet_add_entity:
   !id: 0x0d
   !bound: client
   entity_id_self: zigzag64
   runtime_entity_id: varint
   entity_type: string
   x: lf32
   y: lf32
   z: lf32
   speed_x: lf32
   speed_y: lf32
   speed_z: lf32
   pitch: lf32
   yaw: lf32
   head_yaw: lf32
   attributes: EntityAttributes
   metadata: MetadataDictionary
   links: Links

packet_remove_entity:
   !id: 0x0e
   !bound: client
   entity_id_self: zigzag64

packet_add_item_entity:
   !id: 0x0f
   !bound: client
   entity_id_self: zigzag64
   runtime_entity_id: varint
   item: Item
   x: lf32
   y: lf32
   z: lf32
   speed_x: lf32
   speed_y: lf32
   speed_z: lf32
   metadata: MetadataDictionary
   is_from_fishing: bool

packet_take_item_entity:
   !id: 0x11
   !bound: client
   runtime_entity_id: varint
   target: varint

packet_move_entity:
   !id: 0x12
   !bound: both
   runtime_entity_id: varint
   flags: u8
   position: vec3f
   rotation: Rotation

packet_move_player:
   !id: 0x13
   !bound: both
   runtime_entity_id: varint
   x: lf32
   y: lf32
   z: lf32
   pitch: lf32
   yaw: lf32
   head_yaw: lf32
   mode: u8
   on_ground: bool
   other_runtime_entity_id: varint

packet_rider_jump:
   !id: 0x14
   !bound: both
   unknown: zigzag32

packet_update_block:
   !id: 0x15
   !bound: client
   coordinates: BlockCoordinates
   block_runtime_id: varint
   block_priority: varint
   storage: varint

packet_add_painting:
   !id: 0x16
   !bound: client
   entity_id_self: zigzag64
   runtime_entity_id: varint
   coordinates: BlockCoordinates
   direction: zigzag32
   title: string

packet_tick_sync:
   !id: 0x17
   !bound: both
   request_time: li64
   response_time: li64

packet_level_sound_event_old:
   !id: 0x18
   !bound: both
   sound_id: u8
   position: vec3f
   block_id: zigzag32
   entity_type: zigzag32
   is_baby_mob: bool
   is_global: bool

packet_level_event:
   !id: 0x19
   !bound: client
   event: zigzag32 =>
      1000: sound_click  
      1001: sound_click_fail  
      1002: sound_shoot  
      1003: sound_door  
      1004: sound_fizz  
      1005: sound_ignite  
      1007: sound_ghast  
      1008: sound_ghast_shoot  
      1009: sound_blaze_shoot  
      1010: sound_door_bump  
      1012: sound_door_crash  
      1018: sound_enderman_teleport  
      1020: sound_anvil_break  
      1021: sound_anvil_use  
      1022: sound_anvil_fall  
      1030: sound_pop  
      1032: sound_portal  
      1040: sound_itemframe_add_item  
      1041: sound_itemframe_remove  
      1042: sound_itemframe_place  
      1043: sound_itemframe_remove_item  
      1044: sound_itemframe_rotate_item  
      1050: sound_camera  
      1051: sound_orb  
      1052: sound_totem  
      1060: sound_armor_stand_break  
      1061: sound_armor_stand_hit  
      1062: sound_armor_stand_fall  
      1063: sound_armor_stand_place  
      2000: particle_shoot   #TODO: check 2000-2017
      2001: particle_destroy  
      2002: particle_splash  
      2003: particle_eye_despawn  
      2004: particle_spawn  
      2006: guardian_curse  
      2008: particle_block_force_field  
      2009: particle_projectile_hit  
      2013: particle_enderman_teleport  
      2014: particle_punch_block  
      3001: start_rain  
      3002: start_thunder  
      3003: stop_rain  
      3004: stop_thunder  
      3005: pause_game   #data: 1 to pause, 0 to resume
      3006: pause_game_no_screen   #data: 1 to pause, 0 to resume - same effect as normal pause but without screen
      3007: set_game_speed   #x coordinate of pos = scale factor (default 1.0)
      3500: redstone_trigger  
      3501: cauldron_explode  
      3502: cauldron_dye_armor  
      3503: cauldron_clean_armor  
      3504: cauldron_fill_potion  
      3505: cauldron_take_potion  
      3506: cauldron_fill_water  
      3507: cauldron_take_water  
      3508: cauldron_add_dye  
      3509: cauldron_clean_banner  
      3600: block_start_break  
      3601: block_stop_break  
      4000: set_data  
      9800: players_sleeping  
      0x4000: add_particle_mask
   position: vec3f
   data: zigzag32

packet_block_event:
   !id: 0x1a
   !bound: client
   # Position is the position of the block that an event occurred at.
   position: BlockCoordinates
   # EventType is the type of the block event. 
   # The event type decides the way the event data that follows is used
   type: zigzag32 =>
      0: sound
      1: change_state
   # EventData holds event type specific data. For chests for example,
   # opening the chest means the data must be 1
   data: zigzag32

packet_entity_event:
   !id: 0x1b
   !bound: both
   runtime_entity_id: varint
   event_id: u8 =>
      1: jump 
      2: hurt_animation 
      3: death_animation 
      4: arm_swing 
      5: stop_attack 
      6: tame_fail 
      7: tame_success 
      8: shake_wet 
      9: use_item 
      10: eat_grass_animation 
      11: fish_hook_bubble 
      12: fish_hook_position 
      13: fish_hook_hook 
      14: fish_hook_tease 
      15: squid_ink_cloud 
      16: zombie_villager_cure 
      18: respawn 
      19: iron_golem_offer_flower 
      20: iron_golem_withdraw_flower 
      21: love_particles  #breeding
      22: villager_angry 
      23: villager_happy 
      24: witch_spell_particles 
      25: firework_particles 
      26: in_love_particles 
      27: silverfish_spawn_animation 
      28: guardian_attack 
      29: witch_drink_potion 
      30: witch_throw_potion 
      31: minecart_tnt_prime_fuse 
      32: creeper_prime_fuse 
      33: air_supply_expired 
      34: player_add_xp_levels 
      35: elder_guardian_curse 
      36: agent_arm_swing 
      37: ender_dragon_death 
      38: dust_particles  #not sure what this is
      39: arrow_shake 

      57: eating_item 

      60: baby_animal_feed  #green particles, like bonemeal on crops
      61: death_smoke_cloud 
      62: complete_trade 
      63: remove_leash  #data 1 = cut leash

      65: consume_totem 
      66: player_check_treasure_hunter_achievement  #mojang...
      67: entity_spawn  #used for MinecraftEventing stuff, not needed
      68: dragon_puke  #they call this puke particles
      69: item_entity_merge 
      70: start_swim 
      71: balloon_pop 
      72: treasure_hunt 
      73: agent_summon 
      74: charged_crossbow 
      75: fall 
   data: zigzag32

packet_mob_effect:
   !id: 0x1c
   !bound: client
   runtime_entity_id: varint
   event_id: u8
   effect_id: zigzag32
   amplifier: zigzag32
   particles: bool
   duration: zigzag32

packet_update_attributes:
   !id: 0x1d
   !bound: client
   runtime_entity_id: varint64
   attributes: PlayerAttributes
   tick: varint64

packet_inventory_transaction:
   !id: 0x1e
   !bound: both
   transaction: Transaction

packet_mob_equipment:
   !id: 0x1f
   !bound: both
   runtime_entity_id: varint
   item: Item
   slot: u8
   selected_slot: u8
   windows_id: u8

packet_mob_armor_equipment:
   !id: 0x20
   !bound: both
   runtime_entity_id: varint
   helmet: Item
   chestplate: Item
   leggings: Item
   boots: Item

packet_interact:
   !id: 0x21
   !bound: both
   action_id: u8
   target_runtime_entity_id: varint

packet_block_pick_request:
   !id: 0x22
   !bound: server
   x: zigzag32
   y: zigzag32
   z: zigzag32
   add_user_data: bool
   selected_slot: u8

packet_entity_pick_request:
   !id: 0x23
   !bound: server
   runtime_entity_id: lu64
   selected_slot: u8

# PlayerAction is sent by the client when it executes any action, for example starting to sprint, swim,
# starting the breaking of a block, dropping an item, etc.
packet_player_action:
   !id: 0x24
   !bound: server
   # EntityRuntimeID is the runtime ID of the player. The runtime ID is unique for each world session, and
   # entities are generally identified in packets using this runtime ID.
   runtime_entity_id: varint
   # ActionType is the ID of the action that was executed by the player. It is one of the constants that may
   # be found above.
   action: zigzag32 =>
      0: start_break
      1: abort_break
      2: stop_break
      3: get_updated_block
      4: drop_item
      5: start_sleeping
      6: stop_sleeping
      7: respawn
      8: jump
      9: start_sprint
      10: stop_sprint
      11: start_sneak
      12: stop_sneak
      13: creative_player_destroy_block
      # sent when spawning in a different dimension to tell the server we spawned
      14: dimension_change_ack
      15: start_glide
      16: stop_glide
      17: build_denied
      18: continue_break
      19: change_skin
      # no longer used
      20: set_enchatnment_seed
      21: swimming
      22: stop_swimming
      23: start_spin_attack
      24: stop_spin_attack
      25: ineract_block
   # BlockPosition is the position of the target block, if the action with the ActionType set concerned a
   # block. If that is not the case, the block position will be zero.
   position: BlockCoordinates
   # BlockFace is the face of the target block that was touched. If the action with the ActionType set
   # concerned a block. If not, the face is always 0.
   face: zigzag32

packet_hurt_armor:
   !id: 0x26
   !bound: client
   health: zigzag32

packet_set_entity_data:
   !id: 0x27
   !bound: both
   runtime_entity_id: varint
   metadata: MetadataDictionary
   tick: varint

packet_set_entity_motion:
   !id: 0x28
   !bound: both
   runtime_entity_id: varint
   velocity: vec3f

packet_set_entity_link:
   !id: 0x29
   !bound: client
   ridden_id: zigzag64
   rider_id: zigzag64
   link_type: u8
   unknown: u8

packet_set_health:
   !id: 0x2a
   !bound: client
   health: zigzag32

packet_set_spawn_position:
   !id: 0x2b
   !bound: client
   spawn_type: zigzag32
   coordinates: BlockCoordinates
   dimension: zigzag32
   unknown_coordinates: BlockCoordinates

packet_animate:
   !id: 0x2c
   !bound: both
   action_id: zigzag32
   runtime_entity_id: varint

packet_respawn:
   !id: 0x2d
   !bound: both
   x: lf32
   y: lf32
   z: lf32
   state: u8
   runtime_entity_id: varint

packet_container_open:
   !id: 0x2e
   !bound: client
   window_id: u8
   type: u8
   coordinates: BlockCoordinates
   runtime_entity_id: zigzag64

packet_container_close:
   !id: 0x2f
   !bound: both
   window_id: u8
   server: bool

packet_player_hotbar:
   !id: 0x30
   !bound: both
   selected_slot: varint
   window_id: u8
   select_slot_: bool

packet_inventory_content:
   !id: 0x31
   !bound: both
   inventory_id: varint
   input: ItemStacks

packet_inventory_slot:
   !id: 0x32
   !bound: both
   inventory_id: varint
   slot: varint
   uniqueid: zigzag32
   item: Item

packet_container_set_data:
   !id: 0x33
   !bound: client
   window_id: u8
   property: zigzag32
   value: zigzag32

packet_crafting_data:
   !id: 0x34
   !bound: client
   recipes: Recipes
   potion_type_recipes: PotionTypeRecipes
   potion_container_recipes: PotionContainerChangeRecipes
   is_clean: bool

packet_crafting_event:
   !id: 0x35
   !bound: both
   window_id: u8
   recipe_type: zigzag32
   recipe_id: uuid
   input: ItemStacks
   result: ItemStacks

packet_gui_data_pick_item:
   !id: 0x36
   !bound: client

packet_adventure_settings:
   !id: 0x37
   !bound: both
   flags: varint
   command_permission: varint
   action_permissions: varint
   permission_level: varint
   custom_stored_permissions: varint
   user_id: li64

packet_block_entity_data:
   !id: 0x38
   !bound: both
   position: BlockCoordinates
   nbt: nbt

packet_player_input:
   !id: 0x39
   !bound: server
   motion_x: lf32
   motion_z: lf32
   jumping: bool
   sneaking: bool

packet_level_chunk:
   !id: 0x3a
   !bound: client
   x: zigzag32
   z: zigzag32
   sub_chunk_count: varint
   column: Chunks

packet_set_commands_enabled:
   !id: 0x3b
   !bound: client
   enabled: bool

packet_set_difficulty:
   !id: 0x3c
   !bound: client
   difficulty: varint

packet_change_dimension:
   !id: 0x3d
   !bound: client
   dimension: zigzag32
   position: vec3f
   respawn: bool

packet_set_player_game_type:
   !id: 0x3e
   !bound: both
   gamemode: zigzag32

packet_player_list:
   !id: 0x3f
   !bound: client
   records: PlayerRecords

packet_simple_event:
   !id: 0x40
   !bound: client
   event_type: lu16

packet_spawn_experience_orb:
   !id: 0x42
   !bound: client
   position: vec3f
   count: zigzag32

packet_clientbound_map_item_data:
   !id: 0x43
   !bound: client
   mapinfo: MapInfo

packet_map_info_request:
   !id: 0x44
   !bound: both
   map_id: zigzag64

packet_request_chunk_radius:
   !id: 0x45
   !bound: both
   chunk_radius: zigzag32

packet_chunk_radius_update:
   !id: 0x46
   !bound: client
   chunk_radius: zigzag32

packet_item_frame_drop_item:
   !id: 0x47
   !bound: both
   coordinates: BlockCoordinates

packet_game_rules_changed:
   !id: 0x48
   !bound: client
   rules: GameRules

packet_camera:
   !id: 0x49
   !bound: client
   unknown1: zigzag64
   unknown2: zigzag64

packet_boss_event:
   !id: 0x4a
   !bound: both
   boss_entity_id: zigzag64
   type: varint =>
      # S2C: Shows the boss-bar to the player.
      0: show_bar
      # C2S: Registers a player to a boss fight.
      1: register_player
      # S2C: Removes the boss-bar from the client.
      2: hide_bar
      # C2S: Unregisters a player from a boss fight.
      3: unregister_player
      # S2C: Sets the bar percentage.
      4: set_bar_progress
      # S2C: Sets title of the bar.
      5: set_bar_title
      # S2C: darkens the sky
      6: update_properties
      # S2C: Not implemented :( Intended to alter bar appearance, but these currently produce no effect on client-side whatsoever.
      7: texture
   _: type?
      if register_player or unregister_player:
         player_id: zigzag64
      if show:
         title: string
         bar_progress: lf32
      if update_properties:
         darkness_factor: li16
      if texture:
         color: varint
         overlay: varint
      if set_bar_progress:
         bar_progress: lf32
      if set_bar_title:
         title: string

packet_show_credits:
   !id: 0x4b
   !bound: client
   runtime_entity_id: varint
   status: zigzag32

# This packet sends a list of commands to the client. Commands can have
# arguments, and some of those arguments can have 'enum' values, which are a list of possible
# values for the argument. The serialization is rather complex and involves palettes like chunks.
## In bedrock-protocol, listen to on('client.commands') for a simpler representation
packet_available_commands:
   !id: 0x4c
   !bound: client
   # Here all the enum values for all of the possible commands are stored to one array palette
   enum_values: string[]varint
   # Integer paramaters may sometimes have a prefix, such as the XP command:
   # /xp <amount: int> [player: target] <- here, the xp command gives experience points
   # /xp <amount: int>L [player: target] <- here, the xp command gives experience levels
   # This is the palette of suffixes
   suffixes: string[]varint
   # The list of enum objects
   enums: []varint
      # The name of the enum
      name: string
      # The length of the array below
      values_len: varint
      # Not read from stream: instead calculated from the `values_len` field
      # If the values_len < 0xff => byte
      # If the values_len < 0xffff => short
      # If the values_len < 0xffffff => int
      _enum_type: '["enum_size_based_on_values_len"]'
      # The values in the enum 
      values: []$values_len
         # The indexes to value in the palette
         _: ../_enum_type?
            if byte: u8
            if short: lu16
            if int: lu32
   command_data: []varint
      name: string
      description: string
      flags: u8
      permission_level: u8
      alias: li32
      # The list of overload paramaters for this command
      overloads: []varint
         # Each of the paramaters gets an array of posible overloads
         _: []varint
            # The name of the paramater shown to the user (the `amount` in `/xp <amount: int>`)
            paramater_name: string   
            # Bitfield: If FLAG_ENUM is set, the lower 16 bits act as an index to enums array
            # If FLAG_SUFFIX is set, the lower 16 bits act as an index to the suffix palette
            # and the client interperts the type as just `int` as in the example above
            paramater_type: li32
            # Is this paramater required?
            optional: bool
            # Additinal options for this command (thanks macroshaft...)
            flags: CommandFlags
   # There are two types of enums: static enums which cannot be changed after sending AvaliableCommands,
   # (unless you resend the whole packet) and 'soft' or 'dynamic' enums like below which is an array
   # that can be updated with the UpdateSoftEnum packet
   dynamic_enums: []varint
      name: string
      values: string[]varint
   enum_constraints: []varint
      value_index: li32
      enum_index: li32
      constraints: []varint
         constraint: u8 =>
            0: cheats_enabled

# ParamOptionCollapseEnum specifies if the enum (only if the Type is actually an enum type. If not,
# setting this to true has no effect) should be collapsed. This means that the options of the enum are
# never shown in the actual usage of the command, but only as auto-completion, like it automatically does
# with enums that have a big amount of options. To illustrate, it can make
# <false|true|yes|no> <$Name: bool>.
CommandFlags: [ "bitfield", [
   { "name": "unused", "size": 1, "signed": false },
   { "name": "collapse_enum", "size": 1, "signed": false },
   { "name": "has_semantic_constraint", "size": 1, "signed": false }
]]

# enum_size_based_on_values_len: native

# CommandRequest is sent by the client to request the execution of a server-side command. Although some
# servers support sending commands using the Text packet, this packet is guaranteed to have the correct
# result.
packet_command_request:
   !id: 0x4d
   !bound: server
   # CommandLine is the raw entered command line. The client does no parsing of the command line by itself
   # (unlike it did in the early stages), but lets the server do that.
   command: string
   # Origin holds information about the command sender that will be returnd back in the command response
   origin: CommandOrigin
   # Internal specifies if the command request internal. Setting it to false seems to work and the usage of
   # this field is not known.
   interval: bool


packet_command_block_update:
   !id: 0x4e
   !bound: server
   is_block: bool

packet_command_output:
   !id: 0x4f
   !bound: client
   # CommandOrigin is the data specifying the origin of the command. In other words, the source that the
   # command request was from, such as the player itself or a websocket server. The client forwards the
   # messages in this packet to the right origin, depending on what is sent here.
   origin: CommandOrigin
   # OutputType specifies the type of output that is sent. The OutputType sent by vanilla games appears to
   # be 3, which seems to work.
   output_type: i8
   # SuccessCount is the amount of times that a command was executed successfully as a result of the command
   # that was requested. For servers, this is usually a rather meaningless fields, but for vanilla, this is
   # applicable for commands created with Functions.
   success_count: varint
   # OutputMessages is a list of all output messages that should be sent to the player. Whether they are
   # shown or not, depends on the type of the messages.
   output: []varint
      # Success indicates if the output message was one of a successful command execution. If set to true, the
      # output message is by default coloured white, whereas if set to false, the message is by default
      # coloured red.
      success: bool
      # Message is the message that is sent to the client in the chat window. It may either be simply a
      # message or a translated built-in string like 'commands.tp.success.coordinates', combined with specific
      # parameters below.
      message_id: string
      # Parameters is a list of parameters that serve to supply the message sent with additional information,
      # such as the position that a player was teleported to or the effect that was applied to an entity.
      # These parameters only apply for the Minecraft built-in command output.
      paramaters: string[]varint


packet_update_trade:
   !id: 0x50
   !bound: client
   window_id: u8
   window_type: u8
   unknown0: varint
   unknown1: varint
   unknown2: varint
   is_willing: bool
   trader_entity_id: zigzag64
   player_entity_id: zigzag64
   display_name: string
   nbt: nbt

packet_update_equipment:
   !id: 0x51
   !bound: client
   window_id: u8
   window_type: u8
   unknown: u8
   entity_id: zigzag64
   nbt: nbt

packet_resource_pack_data_info:
   !id: 0x52
   !bound: client
   package_id: string
   max_chunk_size: lu32
   chunk_count: lu32
   compressed_package_size: lu64
   hash: ByteArray
   is_premium: bool
   pack_type: u8

packet_resource_pack_chunk_data:
   !id: 0x53
   !bound: client
   package_id: string
   chunk_index: lu32
   progress: lu64
   payload: ByteArray

packet_resource_pack_chunk_request:
   !id: 0x54
   !bound: server
   package_id: string
   chunk_index: lu32

packet_transfer:
   !id: 0x55
   !bound: client
   server_address: string
   port: lu16

packet_play_sound:
   !id: 0x56
   !bound: client
   name: string
   coordinates: BlockCoordinates
   volume: lf32
   pitch: lf32

packet_stop_sound:
   !id: 0x57
   !bound: client
   name: string
   stop_all: bool

packet_set_title:
   !id: 0x58
   !bound: client
   type: zigzag32
   text: string
   fade_in_time: zigzag32
   stay_time: zigzag32
   fade_out_time: zigzag32

packet_add_behavior_tree:
   !id: 0x59
   !bound: client
   behaviortree: string

packet_structure_block_update:
   !id: 0x5a
   !bound: client

packet_show_store_offer:
   !id: 0x5b
   !bound: client
   unknown0: string
   unknown1: bool

packet_purchase_receipt:
   !id: 0x5c
   !bound: server

packet_player_skin:
   !id: 0x5d
   !bound: both
   uuid: uuid
   skin: Skin
   skin_name: string
   old_skin_name: string
   is_verified: bool

packet_sub_client_login:
   !id: 0x5e
   !bound: client

packet_initiate_web_socket_connection:
   !id: 0x5f
   !bound: client
   server: string

packet_set_last_hurt_by:
   !id: 0x60
   !bound: client
   unknown: varint

packet_book_edit:
   !id: 0x61
   !bound: client
   type: u8 =>
      0: replace_page
      1: add_page
      2: delete_page
      3: swap_pages
      4: sign
   slot: u8
   _: type?
      if replace_page or add_page:
         page_number: u8
         text: string
         photo_name: string
      if delete_page:
         page_number: u8
      if swap_pages:
         page1: u8
         page2: u8
      if sign:
         title: string
         author: string
         xuid: string


packet_npc_request:
   !id: 0x62
   !bound: both
   runtime_entity_id: varint
   unknown0: u8
   unknown1: string
   unknown2: u8

packet_photo_transfer:
   !id: 0x63
   !bound: server
   file_name: string
   image_data: string
   unknown2: string

packet_modal_form_request:
   !id: 0x64
   !bound: client
   form_id: varint
   data: string

packet_modal_form_response:
   !id: 0x65
   !bound: server
   form_id: varint
   data: string

packet_server_settings_request:
   !id: 0x66
   !bound: server

packet_server_settings_response:
   !id: 0x67
   !bound: client
   form_id: varint
   data: string

packet_show_profile:
   !id: 0x68
   !bound: client
   xuid: string

packet_set_default_game_type:
   !id: 0x69
   !bound: client
   gamemode: varint

packet_remove_objective:
   !id: 0x6a
   !bound: client
   objective_name: string

packet_set_display_objective:
   !id: 0x6b
   !bound: client
   display_slot: string
   objective_name: string
   display_name: string
   criteria_name: string
   sort_order: zigzag32

packet_set_score:
   !id: 0x6c
   !bound: client
   entries: ScoreEntries

packet_lab_table:
   !id: 0x6d
   !bound: both
   useless_byte: u8
   lab_table_x: varint
   lab_table_y: varint
   lab_table_z: varint
   reaction_type: u8

packet_update_block_synced:
   !id: 0x6e
   !bound: client
   coordinates: BlockCoordinates
   block_runtime_id: varint
   block_priority: varint
   data_layer_id: varint
   unknown0: varint
   unknown1: varint

packet_move_entity_delta:
   !id: 0x6f
   !bound: client
   runtime_entity_id: varint
   flags: lu16

packet_set_scoreboard_identity:
   !id: 0x70
   !bound: client
   entries: ScoreboardIdentityEntries

packet_set_local_player_as_initialized:
   !id: 0x71
   !bound: server
   runtime_entity_id: varint

packet_update_soft_enum:
   !id: 0x72
   !bound: client

packet_network_stack_latency:
   !id: 0x73
   !bound: both
   timestamp: lu64
   unknown_flag: u8

packet_script_custom_event:
   !id: 0x75
   !bound: both
   event_name: string
   event_data: string

packet_spawn_particle_effect:
   !id: 0x76
   !bound: client
   dimension_id: u8
   entity_id: zigzag64
   position: vec3f
   particle_name: string

packet_available_entity_identifiers:
   !id: 0x77
   !bound: client
   nbt: nbt

packet_level_sound_event_v2:
   !id: 0x78
   !bound: both
   sound_id: u8
   position: vec3f
   block_id: zigzag32
   entity_type: string
   is_baby_mob: bool
   is_global: bool

packet_network_chunk_publisher_update:
   !id: 0x79
   !bound: client
   coordinates: BlockCoordinates
   radius: varint

packet_biome_definition_list:
   !id: 0x7a
   !bound: client
   nbt: nbt

packet_level_sound_event:
   !id: 0x7b
   !bound: both
   sound_id: varint
   position: vec3f
   block_id: zigzag32
   entity_type: string
   is_baby_mob: bool
   is_global: bool

packet_level_event_generic:
   !id: 0x7c
   !bound: client

packet_lectern_update:
   !id: 0x7d
   !bound: client

packet_video_stream_connect:
   !id: 0x7e
   !bound: client
   server_uri: string
   frame_send_frequency: lf32
   action: u8
   resolution_x: li32
   resolution_y: li32

packet_client_cache_status:
   !id: 0x81
   !bound: both
   enabled: bool

packet_on_screen_texture_animation:
   !id: 0x82
   !bound: client

packet_map_create_locked_copy:
   !id: 0x83
   !bound: client

packet_structure_template_data_export_request:
   !id: 0x84
   !bound: client

packet_structure_template_data_export_response:
   !id: 0x85
   !bound: client

packet_update_block_properties:
   !id: 0x86
   !bound: client
   nbt: nbt

packet_client_cache_blob_status:
   !id: 0x87
   !bound: client

packet_client_cache_miss_response:
   !id: 0x88
   !bound: client

packet_network_settings:
   !id: 0x8f
   !bound: both
   unknown: u8
   compression_threshold: u8

packet_creative_content:
   !id: 0x91
   !bound: client
   items: ItemStacks

packet_player_enchant_options:
   !id: 0x92
   !bound: client
   enchant_options: EnchantOptions

packet_item_stack_request:
   !id: 0x93
   !bound: server
   requests: ItemStackRequests

packet_item_stack_response:
   !id: 0x94
   !bound: client
   responses: ItemStackResponses

packet_update_player_game_type:
   !id: 0x97
   !bound: server

packet_packet_violation_warning:
   !id: 0x9c
   !bound: server
   violation_type: zigzag32
   severity: zigzag32
   packet_id: zigzag32
   reason: string

packet_item_component:
   !id: 0xa2
   !bound: client
   entries: ItemComponentList

packet_filter_text_packet:
   !id: 0xa3
   !bound: client
   text: string
   from_server: bool
